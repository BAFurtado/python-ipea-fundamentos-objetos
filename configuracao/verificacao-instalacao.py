#!/usr/bin/env python3
"""
Script de Verifica√ß√£o de Instala√ß√£o - Python para An√°lise de Dados IPEA
Autor: Bernardo Alves Furtado
"""

import sys
import subprocess
import importlib.util

def print_color(text, color="green"):
    """Fun√ß√£o para imprimir texto colorido"""
    colors = {
        "green": "\033[92m",
        "yellow": "\033[93m", 
        "red": "\033[91m",
        "blue": "\033[94m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, '')}{text}{colors['reset']}")

def verificar_python():
    """Verifica a vers√£o do Python"""
    print_color("üêç Verificando Python...", "blue")
    try:
        version = sys.version_info
        print_color(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} instalado", "green")
        
        if version.major == 3 and version.minor >= 8:
            print_color("‚úÖ Vers√£o compat√≠vel (3.8+)", "green")
        else:
            print_color("‚ö†Ô∏è  Vers√£o muito antiga, recomendo Python 3.8+", "yellow")
            
        return True
    except Exception as e:
        print_color(f"‚ùå Erro ao verificar Python: {e}", "red")
        return False

def verificar_pip():
    """Verifica se pip est√° dispon√≠vel"""
    print_color("\nüì¶ Verificando pip...", "blue")
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "--version"], 
                              capture_output=True, text=True, check=True)
        print_color(f"‚úÖ {result.stdout.strip()}", "green")
        return True
    except subprocess.CalledProcessError:
        print_color("‚ùå pip n√£o encontrado", "red")
        return False

def verificar_biblioteca(nome, nome_import=None):
    """Verifica se uma biblioteca espec√≠fica est√° instalada"""
    nome_import = nome_import or nome
    try:
        spec = importlib.util.find_spec(nome_import)
        if spec is not None:
            # Tenta obter a vers√£o
            try:
                mod = importlib.import_module(nome_import)
                version = getattr(mod, '__version__', 'vers√£o n√£o dispon√≠vel')
                print_color(f"‚úÖ {nome}: {version}", "green")
            except:
                print_color(f"‚úÖ {nome} instalado", "green")
            return True
        else:
            print_color(f"‚ùå {nome} n√£o instalado", "red")
            return False
    except ImportError:
        print_color(f"‚ùå {nome} n√£o instalado", "red")
        return False

def verificar_bibliotecas_essenciais():
    """Verifica todas as bibliotecas essenciais do curso"""
    print_color("\nüìö Verificando bibliotecas essenciais...", "blue")
    
    bibliotecas = [
        ("pandas", "pandas"),           # Manipula√ß√£o de dados
        ("numpy", "numpy"),             # Computa√ß√£o num√©rica
        ("scikit-learn", "sklearn"),    # Machine Learning
        ("jupyter", "jupyter"),         # Jupyter notebooks
        ("matplotlib", "matplotlib"),   # Visualiza√ß√£o
        ("seaborn", "seaborn"),         # Visualiza√ß√£o estat√≠stica
    ]
    
    resultados = []
    for nome, import_name in bibliotecas:
        resultados.append(verificar_biblioteca(nome, import_name))
    
    return all(resultados)

def verificar_editor():
    """Verifica se VS Code est√° instalado (aproxima√ß√£o)"""
    print_color("\n‚ö° Verificando editores...", "blue")
    
    # Verifica se o comando 'code' est√° dispon√≠vel
    try:
        subprocess.run(["code", "--version"], capture_output=True, check=True)
        print_color("‚úÖ VS Code detectado (comando 'code' dispon√≠vel)", "green")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print_color("‚ö†Ô∏è  VS Code n√£o detectado (opcional)", "yellow")
        return False

def verificar_git():
    """Verifica se Git est√° instalado"""
    print_color("\nüîß Verificando Git...", "blue")
    try:
        result = subprocess.run(["git", "--version"], capture_output=True, text=True, check=True)
        print_color(f"‚úÖ {result.stdout.strip()}", "green")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print_color("‚ùå Git n√£o encontrado", "red")
        return False

def mostrar_comandos_instalacao():
    """Mostra comandos para instalar o que falta"""
    print_color("\nüîß COMANDOS DE INSTALA√á√ÉO:", "yellow")
    print_color("=" * 50, "yellow")
    
    print_color("\nüì¶ Instalar bibliotecas essenciais:", "blue")
    print("pip install pandas numpy scikit-learn jupyter matplotlib seaborn")
    
    print_color("\nüêç Instalar com conda (se preferir):", "blue")
    print("conda install pandas numpy scikit-learn jupyter matplotlib seaborn")
    
    print_color("\n‚ö° Instalar VS Code:", "blue")
    print("https://code.visualstudio.com/download")
    
    print_color("\nüîß Instalar Git:", "blue")
    print("https://git-scm.com/downloads")
    
    print_color("=" * 50, "yellow")

def main():
    """Fun√ß√£o principal"""
    print_color("üîç VERIFICA√á√ÉO DO AMBIENTE PYTHON - CURSO IPEA", "blue")
    print_color("=" * 60, "blue")
    
    resultados = []
    
    # Executa todas as verifica√ß√µes
    resultados.append(verificar_python())
    resultados.append(verificar_pip())
    resultados.append(verificar_bibliotecas_essenciais())
    resultados.append(verificar_editor())
    resultados.append(verificar_git())
    
    print_color("\n" + "=" * 60, "blue")
    
    # Resumo final
    sucessos = sum(resultados)
    total = len(resultados)
    
    if sucessos == total:
        print_color(f"üéâ PERFEITO! {sucessos}/{total} verifica√ß√µes passaram!", "green")
        print_color("Seu ambiente est√° pronto para o curso!", "green")
    elif sucessos >= total - 1:
        print_color(f"‚úÖ QUASE L√Å! {sucessos}/{total} verifica√ß√µes passaram.", "green")
        print_color("Alguns itens opcionais em falta, mas pode prosseguir.", "yellow")
        mostrar_comandos_instalacao()
    else:
        print_color(f"‚ö†Ô∏è  ATEN√á√ÉO! Apenas {sucessos}/{total} verifica√ß√µes passaram.", "red")
        print_color("√â necess√°rio instalar alguns componentes:", "red")
        mostrar_comandos_instalacao()
    
    print_color("\nüí° DICA: Execute este script periodicamente para verificar seu ambiente!", "blue")

if __name__ == "__main__":
    main()